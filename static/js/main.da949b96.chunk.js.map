{"version":3,"sources":["components/ImgurCard.jsx","App.js","serviceWorker.js","index.js"],"names":["ImgurCard","item","useState","like","setLike","Card","style","width","padding","Title","title","mp4","className","src","autoPlay","muted","loop","images","link","endsWith","Img","variant","makeImgurMedia","Body","onClick","e","icon","faHeartSolid","faHeart","ups","faEye","views","App","error","setError","isLoaded","setIsLoaded","items","setItems","useEffect","fetch","headers","Authorization","then","res","json","result","data","console","log","flexWrap","flexDirection","display","justifyContent","breakpointCols","default","1060","500","columnClassName","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0TA0DeA,EApDG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACNC,oBAAS,GADH,mBACvBC,EADuB,KACjBC,EADiB,KAmC9B,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,QAAS,KACtC,kBAACH,EAAA,EAAKI,MAAN,CAAYH,MAAO,CAAEE,QAAS,WAAaP,EAAKS,OA3B/B,SAACT,GACpB,OAAIA,EAAKU,IAEL,2BAAOC,UAAW,eAAgBC,IAAKZ,EAAKU,IAAKG,UAAQ,EAACC,OAAK,EAACC,MAAI,IAGpEf,EAAKgB,OACAhB,EAAKgB,OAAO,GAAGC,KAAKC,SAAS,OAClC,2BACEP,UAAW,eACXC,IAAKZ,EAAKgB,OAAO,GAAGC,KACpBJ,UAAQ,EACRC,OAAK,EACLC,MAAI,IAGN,kBAACX,EAAA,EAAKe,IAAN,CAAUC,QAAQ,MAAMR,IAAKZ,EAAKgB,OAAO,GAAGC,OAErCjB,EAAKiB,KAAKC,SAAS,QAAUlB,EAAKiB,KAAKC,SAAS,OAClD,kBAACd,EAAA,EAAKe,IAAN,CAAUC,QAAQ,MAAMR,IAAKZ,EAAKiB,OAElC,kBAACb,EAAA,EAAKe,IAAN,CAAUC,QAAQ,MAAMR,IAvBjC,yLA8BGS,CAAerB,GAChB,kBAACI,EAAA,EAAKkB,KAAN,CAAWX,UAAW,eACpB,uBAAGY,QAAS,SAACC,GApCjBrB,GAASD,KAqCH,kBAAC,IAAD,CAAiBuB,KAAMvB,EAAOwB,IAAeC,MAC5CzB,EAAOF,EAAK4B,IAAM,EAAI5B,EAAK4B,KAE9B,2BACE,kBAAC,IAAD,CAAiBH,KAAMI,MADzB,IACoC7B,EAAK8B,UC+BlCC,MA5Ef,WAAgB,IAAD,EACa9B,mBAAS,MADtB,mBACN+B,EADM,KACCC,EADD,OAEmBhC,oBAAS,GAF5B,mBAENiC,EAFM,KAEIC,EAFJ,OAGalC,mBAAS,IAHtB,mBAGNmC,EAHM,KAGCC,EAHD,KAkCb,OA9BAC,qBAAU,WACRC,MAAM,mDAAoD,CACxDC,QAAS,CACPC,cAAe,+BAGhBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACC,SAACG,GACCV,GAAY,GAEZU,EAAOC,KAAKd,MACRC,EAASY,EAAOC,KAAKd,OACrBK,EAASQ,EAAOC,MAEpBC,QAAQC,IAAIH,MAEd,SAACb,GACCG,GAAY,GACZF,EAASD,QAGd,IAQCA,EACK,sDAA4BA,GACzBE,EAIR,6BACE,yBAAKvB,UAAU,kBACb,gEACA,6BACA,2HAIA,2GAKF,yBACEN,MAAO,CACL4C,SAAU,OACVC,cAAe,MACfC,QAAS,OACTC,eAAgB,WAGlB,kBAAC,IAAD,CACEC,eAlCmB,CAC3BC,QAAS,EACTC,KAAM,EACNC,IAAK,GAgCG7C,UAAU,kBACV8C,gBAAgB,0BAEfrB,EAAMsB,KAAI,SAAC1D,EAAM2D,GAAP,OACT,kBAAC,EAAD,CAAW3D,KAAMA,EAAM4D,IAAKD,UA9B/B,4CC/BSE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACLe,QAAQf,MAAMA,EAAM6C,c","file":"static/js/main.da949b96.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHeart as faHeartSolid } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faHeart, faEye } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nconst ImgurCard = ({ item }) => {\r\n  const [like, setLike] = useState(false);\r\n\r\n  let handleLike = () => {\r\n    setLike(!like);\r\n  };\r\n\r\n  let sadCat404 =\r\n    \"https://wompampsupport.azureedge.net/fetchimage?siteId=7575&v=2&jpgQuality=100&width=700&url=https%3A%2F%2Fi.kym-cdn.com%2Fentries%2Ficons%2Ffacebook%2F000%2F026%2F489%2Fcrying.jpg\";\r\n\r\n  let makeImgurMedia = (item) => {\r\n    if (item.mp4) {\r\n      return (\r\n        <video className={\"card-img-top\"} src={item.mp4} autoPlay muted loop />\r\n      );\r\n    }\r\n    if (item.images) {\r\n      return item.images[0].link.endsWith(\"mp4\") ? (\r\n        <video\r\n          className={\"card-img-top\"}\r\n          src={item.images[0].link}\r\n          autoPlay\r\n          muted\r\n          loop\r\n        ></video>\r\n      ) : (\r\n        <Card.Img variant=\"top\" src={item.images[0].link} />\r\n      );\r\n    } else if (item.link.endsWith(\"jpg\") || item.link.endsWith(\"png\")) {\r\n      return <Card.Img variant=\"top\" src={item.link} />;\r\n    } else {\r\n      return <Card.Img variant=\"top\" src={sadCat404} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card style={{ width: \"18rem\", padding: \"\" }}>\r\n      <Card.Title style={{ padding: \"0.5rem\" }}>{item.title}</Card.Title>\r\n      {makeImgurMedia(item)}\r\n      <Card.Body className={\"custom-body\"}>\r\n        <p onClick={(e) => handleLike()}>\r\n          <FontAwesomeIcon icon={like ? faHeartSolid : faHeart} />\r\n          {like ? item.ups + 1 : item.ups}\r\n        </p>\r\n        <p>\r\n          <FontAwesomeIcon icon={faEye} /> {item.views}\r\n        </p>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ImgurCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Masonry from \"react-masonry-css\";\r\n\r\nimport ImgurCard from \"./components/ImgurCard\";\r\nfunction App() {\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n  useEffect(() => {\r\n    fetch(\"https://api.imgur.com/3/gallery/hot/viral/0.json\", {\r\n      headers: {\r\n        Authorization: \"Client-ID 372efbdc08ad473\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n\r\n          result.data.error\r\n            ? setError(result.data.error)\r\n            : setItems(result.data);\r\n\r\n          console.log(result);\r\n        },\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  const breakpointColumnsObj = {\r\n    default: 3,\r\n    1060: 2,\r\n    500: 1,\r\n  };\r\n\r\n  if (error) {\r\n    return <h1> Error from Imgur API: {error}</h1>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <div className=\"welcome-header\">\r\n          <h1>Imgur Gallery üñºÔ∏è</h1>\r\n          <br />\r\n          <h3>\r\n            Hot posts are fetched from Imgur API. Posts can be liked, likes are\r\n            stored in LocalStorage.\r\n          </h3>\r\n          <h3>\r\n            Both Images and videos can be displayed. Content is displayed via\r\n            masonry.\r\n          </h3>\r\n        </div>\r\n        <div\r\n          style={{\r\n            flexWrap: \"wrap\",\r\n            flexDirection: \"row\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Masonry\r\n            breakpointCols={breakpointColumnsObj}\r\n            className=\"my-masonry-grid\"\r\n            columnClassName=\"my-masonry-grid_column\"\r\n          >\r\n            {items.map((item, index) => (\r\n              <ImgurCard item={item} key={index} />\r\n            ))}\r\n          </Masonry>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}